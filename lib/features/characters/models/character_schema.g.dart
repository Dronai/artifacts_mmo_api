// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'character_schema.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

CharacterSchema _$CharacterSchemaFromJson(Map<String, dynamic> json) =>
    CharacterSchema(
      name: json['name'] as String,
      account: json['account'] as String,
      skin: $enumDecode(_$SkinEnumMap, json['skin']),
      level: (json['level'] as num).toInt(),
      xp: (json['xp'] as num).toInt(),
      maxXp: (json['max_xp'] as num).toInt(),
      gold: (json['gold'] as num).toInt(),
      speed: (json['speed'] as num).toInt(),
      miningLevel: (json['mining_level'] as num).toInt(),
      miningXp: (json['mining_xp'] as num).toInt(),
      miningMaxXp: (json['mining_max_xp'] as num).toInt(),
      woodcuttingLevel: (json['woodcutting_level'] as num).toInt(),
      woodcuttingXp: (json['woodcutting_xp'] as num).toInt(),
      woodcuttingMaxXp: (json['woodcutting_max_xp'] as num).toInt(),
      fishingLevel: (json['fishing_level'] as num).toInt(),
      fishingXp: (json['fishing_xp'] as num).toInt(),
      fishingMaxXp: (json['fishing_max_xp'] as num).toInt(),
      weaponcraftingLevel: (json['weaponcrafting_level'] as num).toInt(),
      weaponcraftingXp: (json['weaponcrafting_xp'] as num).toInt(),
      weaponcraftingMaxXp: (json['weaponcrafting_max_xp'] as num).toInt(),
      gearcraftingLevel: (json['gearcrafting_level'] as num).toInt(),
      gearcraftingXp: (json['gearcrafting_xp'] as num).toInt(),
      gearcraftingMaxXp: (json['gearcrafting_max_xp'] as num).toInt(),
      jewelrycraftingLevel: (json['jewelrycrafting_level'] as num).toInt(),
      jewelrycraftingXp: (json['jewelrycrafting_xp'] as num).toInt(),
      jewelrycraftingMaxXp: (json['jewelrycrafting_max_xp'] as num).toInt(),
      cookingLevel: (json['cooking_level'] as num).toInt(),
      cookingXp: (json['cooking_xp'] as num).toInt(),
      cookingMaxXp: (json['cooking_max_xp'] as num).toInt(),
      alchemyLevel: (json['alchemy_level'] as num).toInt(),
      alchemyXp: (json['alchemy_xp'] as num).toInt(),
      alchemyMaxXp: (json['alchemy_max_xp'] as num).toInt(),
      hp: (json['hp'] as num).toInt(),
      maxHp: (json['max_hp'] as num).toInt(),
      haste: (json['haste'] as num).toInt(),
      criticalStrike: (json['critical_strike'] as num).toInt(),
      wisdom: (json['wisdom'] as num).toInt(),
      prospecting: (json['prospecting'] as num).toInt(),
      attackFire: (json['attack_fire'] as num).toInt(),
      attackEarth: (json['attack_earth'] as num).toInt(),
      attackWater: (json['attack_water'] as num).toInt(),
      attackAir: (json['attack_air'] as num).toInt(),
      dmg: (json['dmg'] as num).toInt(),
      dmgFire: (json['dmg_fire'] as num).toInt(),
      dmgEarth: (json['dmg_earth'] as num).toInt(),
      dmgWater: (json['dmg_water'] as num).toInt(),
      dmgAir: (json['dmg_air'] as num).toInt(),
      resFire: (json['res_fire'] as num).toInt(),
      resEarth: (json['res_earth'] as num).toInt(),
      resWater: (json['res_water'] as num).toInt(),
      resAir: (json['res_air'] as num).toInt(),
      x: (json['x'] as num).toInt(),
      y: (json['y'] as num).toInt(),
      cooldown: (json['cooldown'] as num).toInt(),
      cooldownExpiration:
          json['cooldown_expiration'] == null
              ? null
              : DateTime.parse(json['cooldown_expiration'] as String),
      weaponSlot: json['weapon_slot'] as String,
      runeSlot: json['rune_slot'] as String,
      shieldSlot: json['shield_slot'] as String,
      helmetSlot: json['helmet_slot'] as String,
      bodyArmorSlot: json['body_armor_slot'] as String,
      legArmorSlot: json['leg_armor_slot'] as String,
      bootsSlot: json['boots_slot'] as String,
      ring1Slot: json['ring1_slot'] as String,
      ring2Slot: json['ring2_slot'] as String,
      amuletSlot: json['amulet_slot'] as String,
      artifact1Slot: json['artifact1_slot'] as String,
      artifact2Slot: json['artifact2_slot'] as String,
      artifact3Slot: json['artifact3_slot'] as String,
      utility1Slot: json['utility1_slot'] as String,
      utility1SlotQuantity: (json['utility1_slot_quantity'] as num).toInt(),
      utility2Slot: json['utility2_slot'] as String,
      utility2SlotQuantity: (json['utility2_slot_quantity'] as num).toInt(),
      bagSlot: json['bag_slot'] as String,
      task: json['task'] as String,
      taskType: json['task_type'] as String,
      taskProgress: (json['task_progress'] as num).toInt(),
      taskTotal: (json['task_total'] as num).toInt(),
      inventoryMaxItems: (json['inventory_max_items'] as num).toInt(),
      inventory:
          (json['inventory'] as List<dynamic>?)
              ?.map((e) => InventorySlot.fromJson(e as Map<String, dynamic>))
              .toList() ??
          const [],
    );

Map<String, dynamic> _$CharacterSchemaToJson(CharacterSchema instance) =>
    <String, dynamic>{
      'name': instance.name,
      'account': instance.account,
      'skin': _$SkinEnumMap[instance.skin]!,
      'level': instance.level,
      'xp': instance.xp,
      'max_xp': instance.maxXp,
      'gold': instance.gold,
      'speed': instance.speed,
      'mining_level': instance.miningLevel,
      'mining_xp': instance.miningXp,
      'mining_max_xp': instance.miningMaxXp,
      'woodcutting_level': instance.woodcuttingLevel,
      'woodcutting_xp': instance.woodcuttingXp,
      'woodcutting_max_xp': instance.woodcuttingMaxXp,
      'fishing_level': instance.fishingLevel,
      'fishing_xp': instance.fishingXp,
      'fishing_max_xp': instance.fishingMaxXp,
      'weaponcrafting_level': instance.weaponcraftingLevel,
      'weaponcrafting_xp': instance.weaponcraftingXp,
      'weaponcrafting_max_xp': instance.weaponcraftingMaxXp,
      'gearcrafting_level': instance.gearcraftingLevel,
      'gearcrafting_xp': instance.gearcraftingXp,
      'gearcrafting_max_xp': instance.gearcraftingMaxXp,
      'jewelrycrafting_level': instance.jewelrycraftingLevel,
      'jewelrycrafting_xp': instance.jewelrycraftingXp,
      'jewelrycrafting_max_xp': instance.jewelrycraftingMaxXp,
      'cooking_level': instance.cookingLevel,
      'cooking_xp': instance.cookingXp,
      'cooking_max_xp': instance.cookingMaxXp,
      'alchemy_level': instance.alchemyLevel,
      'alchemy_xp': instance.alchemyXp,
      'alchemy_max_xp': instance.alchemyMaxXp,
      'hp': instance.hp,
      'max_hp': instance.maxHp,
      'haste': instance.haste,
      'critical_strike': instance.criticalStrike,
      'wisdom': instance.wisdom,
      'prospecting': instance.prospecting,
      'attack_fire': instance.attackFire,
      'attack_earth': instance.attackEarth,
      'attack_water': instance.attackWater,
      'attack_air': instance.attackAir,
      'dmg': instance.dmg,
      'dmg_fire': instance.dmgFire,
      'dmg_earth': instance.dmgEarth,
      'dmg_water': instance.dmgWater,
      'dmg_air': instance.dmgAir,
      'res_fire': instance.resFire,
      'res_earth': instance.resEarth,
      'res_water': instance.resWater,
      'res_air': instance.resAir,
      'x': instance.x,
      'y': instance.y,
      'cooldown': instance.cooldown,
      'cooldown_expiration': instance.cooldownExpiration?.toIso8601String(),
      'weapon_slot': instance.weaponSlot,
      'rune_slot': instance.runeSlot,
      'shield_slot': instance.shieldSlot,
      'helmet_slot': instance.helmetSlot,
      'body_armor_slot': instance.bodyArmorSlot,
      'leg_armor_slot': instance.legArmorSlot,
      'boots_slot': instance.bootsSlot,
      'ring1_slot': instance.ring1Slot,
      'ring2_slot': instance.ring2Slot,
      'amulet_slot': instance.amuletSlot,
      'artifact1_slot': instance.artifact1Slot,
      'artifact2_slot': instance.artifact2Slot,
      'artifact3_slot': instance.artifact3Slot,
      'utility1_slot': instance.utility1Slot,
      'utility1_slot_quantity': instance.utility1SlotQuantity,
      'utility2_slot': instance.utility2Slot,
      'utility2_slot_quantity': instance.utility2SlotQuantity,
      'bag_slot': instance.bagSlot,
      'task': instance.task,
      'task_type': instance.taskType,
      'task_progress': instance.taskProgress,
      'task_total': instance.taskTotal,
      'inventory_max_items': instance.inventoryMaxItems,
      'inventory': instance.inventory,
    };

const _$SkinEnumMap = {
  Skin.men1: 'men1',
  Skin.men2: 'men2',
  Skin.men3: 'men3',
  Skin.women1: 'women1',
  Skin.women2: 'women2',
  Skin.women3: 'women3',
};
